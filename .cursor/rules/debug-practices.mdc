---
description: Bonnes pratiques pour le debug et l'exploration de code
alwaysApply: true
---

# Debug & Exploration - Bonnes Pratiques

## ‚ùå ANTI-PATTERN : Scripts jetables

**NE JAMAIS faire :**
```python
# test_debug_truc.py cr√©√© juste pour debug
# puis supprim√© apr√®s ex√©cution
```

**Probl√®me :** Pollue le d√©p√¥t, cr√©e du bruit dans git, pas reproductible.

---

## ‚úÖ M√©thodes recommand√©es

### 1. REPL Python (pr√©f√©r√© pour exploration interactive)

**Cas d'usage :** Tester une fonction, explorer un objet, it√©rer rapidement

```bash
$ python
>>> from agents.notion_relation_resolver import NotionRelationResolver
>>> r = NotionRelationResolver()
>>> r.calculate_similarity("strate i", "strate i - la peripherie")
0.75
>>> r.normalize_name("Le L√©viathan")
'leviathan'
```

**Avantages :**
- Pas de fichier cr√©√©
- Historique accessible (fl√®ches haut/bas)
- R√©sultats imm√©diats

### 2. IPython (si install√©, meilleur que python vanilla)

```bash
$ ipython
In [1]: from agents.notion_relation_resolver import NotionRelationResolver
In [2]: r = NotionRelationResolver()
In [3]: r.fetch_entity_names("lieux")  # Auto-compl√©tion, coloration syntaxe
```

### 3. Commandes inline (pour tests tr√®s courts)

```bash
python -c "from agents.notion_resolver import ...; print(test())"
```

**Cas d'usage :** Scripts one-liner, CI/CD, v√©rifications rapides

### 4. Bloc `if __name__ == "__main__"` dans les modules

**Le meilleur compromis pour tester un module en d√©veloppement**

```python
# agents/notion_relation_resolver.py

class NotionRelationResolver:
    # ... code principal ...
    pass

if __name__ == "__main__":
    """Tests rapides du module (non committ√© dans tests/)"""
    import sys
    sys.stdout.reconfigure(encoding='utf-8')  # Windows
    
    # Test 1
    print("=== Test fetch ===")
    resolver = NotionRelationResolver()
    lieux = resolver.fetch_entity_names("lieux")
    print(f"Fetched {len(lieux)} lieux")
    
    # Test 2
    print("\n=== Test fuzzy matching ===")
    match = resolver.find_match("L√©viathan", "lieux")
    if match:
        print(f"‚úÖ Match: {match.matched_name} ({match.confidence:.2f})")
    else:
        print("‚ùå No match")
```

**Ex√©cution :**
```bash
python agents/notion_relation_resolver.py
```

**Avantages :**
- Code de test **avec** le module (coh√©sion)
- Pas de fichier s√©par√© √† cr√©er/supprimer
- Docummente les usages du module
- Reproductible (commit√© avec le code)

---

## üß™ Tests p√©rennes vs. Exploration

### Tests p√©rennes ‚Üí `tests/`
- Documentent le comportement attendu
- Ex√©cut√©s en CI/CD
- Prot√®gent contre les r√©gressions
- **Restent dans le d√©p√¥t**

**Exemple :** `tests/test_relation_principale.py`

### Exploration/Debug ‚Üí REPL ou `if __name__`
- It√©rations rapides
- Hypoth√®ses √† v√©rifier
- Pas de r√©gression √† couvrir
- **Pas de fichiers jetables**

---

## üìã Checklist avant de "tester quelque chose"

1. **C'est une exploration ?** ‚Üí REPL / IPython
2. **C'est un test unitaire d'une fonction ?** ‚Üí `if __name__` dans le module
3. **C'est un test de comportement syst√®me ?** ‚Üí `tests/test_*.py`
4. **C'est un script d'usage unique ?** ‚Üí √âvaluer si vraiment n√©cessaire

**Jamais :** Cr√©er `test_truc.py`, l'ex√©cuter, puis le supprimer.

---

## Exemples pratiques

### Debugger un probl√®me de fuzzy matching

**‚ùå Mauvais :**
```bash
# Cr√©er tests/debug_fuzzy.py
python tests/debug_fuzzy.py
# Supprimer tests/debug_fuzzy.py
```

**‚úÖ Bon :**
```bash
$ python
>>> from agents.notion_relation_resolver import NotionRelationResolver
>>> r = NotionRelationResolver()
>>> r.calculate_similarity("strate i", "strate i - la peripherie caudale")
0.75
# Tester plusieurs valeurs, it√©rer
```

### V√©rifier la configuration d'une API

**‚ùå Mauvais :**
```bash
# Cr√©er check_notion_api.py
python check_notion_api.py
rm check_notion_api.py
```

**‚úÖ Bon :**
```python
# Dans agents/notion_relation_resolver.py
if __name__ == "__main__":
    # V√©rifier la config API
    resolver = NotionRelationResolver()
    print(f"Token: {'‚úì' if resolver.notion_token else '‚úó'}")
    print(f"Version: {resolver.notion_version}")
```

---

## üéØ Principe g√©n√©ral

> **Si tu dois cr√©er un fichier juste pour l'ex√©cuter une fois,  
> demande-toi pourquoi tu ne peux pas le faire dans un REPL.**

Les seules exceptions :
- Notebooks Jupyter (exploration de donn√©es complexe)
- Scripts d'administration (migrations DB, etc.) ‚Üí dossier `scripts/`
- Benchmarks reproductibles ‚Üí `benchmarks/`

**Jamais** de fichiers √©ph√©m√®res dans `tests/` ou √† la racine.
