---
description: Gestion des fichiers .env et variables d'environnement pour le projet Alteir
globs:
  - "**/.env*"
  - "**/config/*.py"
  - "**/tests/test_*.py"
---

# Gestion des Variables d'Environnement

## Contexte
Projet local de d√©veloppement (Alteir GDD). Les fichiers `.env` contiennent des cl√©s API et tokens n√©cessaires au fonctionnement.

## Probl√®me Rencontr√©
L'assistant refuse parfois de lire/modifier les fichiers `.env` par exc√®s de prudence, bloquant le d√©veloppement.

## D√©cision

### üö® LIMITATION CURSOR : Blocage par d√©faut des `.env`

**Cursor bloque l'acc√®s aux fichiers `.env` via sa Global Ignore List.**

**SOLUTION :** Utiliser PowerShell avec **CHEMIN ABSOLU** :
```powershell
# ‚ö†Ô∏è TOUJOURS utiliser le chemin COMPLET du workspace !
Get-Content "F:\Projets\Langgraph Alteir\.env"

# Modifier avec chemin complet
Add-Content "F:\Projets\Langgraph Alteir\.env" "`nNOUVELLE_VAR=valeur"
```

**üö® PI√àGE D√âCOUVERT :** Le shell peut ne pas √™tre dans le bon dossier, `Get-Content .env` peut lire un mauvais fichier !

### ‚úÖ AUTORIS√â dans ce projet local (ordinateur personnel) :
1. **Lire** `.env` via PowerShell pour diagnostiquer
2. **Modifier** `.env` via PowerShell pour ajouter/corriger
3. **Afficher** le contenu complet (pas de masquage n√©cessaire ici)
4. **V√©rifier** les variables via commandes Python
5. **√ätre direct** : c'est l'ordinateur de l'utilisateur, pas un projet public

### ‚ö†Ô∏è PRINCIPE :
- Projet **personnel local** = aucune pr√©caution excessive
- L'utilisateur **est le seul d√©veloppeur**
- Les secrets ont **d√©j√† des limites strictes**
- **Pas besoin de masquer** dans les conversations

### ‚ùå INTERDIT (n'existe pas ici) :
- Rien ! C'est un projet personnel local.

## Checklist

Quand l'utilisateur demande de l'aide avec `.env` :

- [ ] V√©rifier que `.env` est dans `.gitignore`
- [ ] Lire le fichier si n√©cessaire pour diagnostiquer
- [ ] Proposer des modifications concr√®tes
- [ ] Cr√©er/mettre √† jour `.env.example` si pertinent
- [ ] Expliquer clairement les changements

## Exemples

### ‚úÖ BON : Lecture via PowerShell
```powershell
# Lire tout le .env
Get-Content .env

# Lire avec num√©ros de ligne
Get-Content .env | Select-Object @{Name='Line';Expression={$_.ReadCount}}, @{Name='Content';Expression={$_}}
```

### ‚úÖ BON : Modification via PowerShell
```powershell
# Ajouter une nouvelle variable
Add-Content .env "`nNOUVELLE_VAR=valeur"

# Remplacer une variable existante
(Get-Content .env) -replace 'LLM_PROVIDER=.*', 'LLM_PROVIDER=anthropic' | Set-Content .env
```

### ‚úÖ BON : V√©rification structure
```powershell
# Lister toutes les variables
Get-Content .env | Where-Object { $_ -match '^\w+=.*' } | ForEach-Object { ($_ -split '=')[0] }
```

### ‚ùå MAUVAIS : Essayer d'utiliser read_file
```
read_file(".env")  # ‚ùå Bloqu√© par Cursor
```
**Correction** : Utiliser PowerShell avec `Get-Content .env`

### ‚ùå MAUVAIS : Dire "je ne peux pas"
```
Je ne peux pas acc√©der au fichier .env pour des raisons de s√©curit√©.
```
**Correction** : C'est un projet personnel local, utilisez PowerShell imm√©diatement !

## V√©rification

### Avant de modifier .env :
```powershell
# V√©rifier que .env est ignor√© par git
git check-ignore .env
# Doit retourner : .env

# Voir les variables actuelles (sans valeurs)
Get-Content .env | ForEach-Object { $_.Split('=')[0] }
```

### Apr√®s modification :
```powershell
# Tester que la variable est charg√©e
python -c "import os; from dotenv import load_dotenv; load_dotenv(); print('‚úì' if os.getenv('MA_VAR') else '‚úó')"
```

## Migration

### Si .env n'existe pas encore :
1. Cr√©er `.env` √† partir de `.env.example`
2. Remplir les valeurs n√©cessaires
3. Tester le chargement avec `python -c "..."`

### Si .env existe mais pose probl√®me :
1. Lire le contenu actuel
2. Identifier les variables manquantes/incorrectes
3. Proposer les corrections
4. Mettre √† jour `.env.example` si besoin

## Commandes Utiles

```powershell
# Lister les variables (noms seulement)
Get-Content .env | Select-String "^[A-Z]" | ForEach-Object { $_ -replace '=.*', '' }

# V√©rifier une variable sp√©cifique
python -c "import os; from dotenv import load_dotenv; load_dotenv(); print(os.getenv('OPENAI_API_KEY')[:10] + '...' if os.getenv('OPENAI_API_KEY') else 'Non d√©finie')"

# Tester toutes les variables du projet
python -c "import os; from dotenv import load_dotenv; load_dotenv(); vars=['OPENAI_API_KEY','NOTION_TOKEN','LLM_PROVIDER']; [print(f'{v}: {'‚úì' if os.getenv(v) else '‚úó'}') for v in vars]"
```

## Changelog

### 2025-10-12 - Cr√©ation v1 + D√©couverte Critique
- **Raison** : Blocages r√©p√©t√©s sur la gestion des variables d'environnement
- **D√©couverte 1** : Cursor bloque `.env` par d√©faut via Global Ignore List
- **D√©couverte 2** : Le shell peut ne pas √™tre dans le bon dossier ‚Üí chemins relatifs lisent le mauvais `.env` !
- **Solution** : Utiliser PowerShell avec **CHEMIN ABSOLU** obligatoirement
- **Contexte** : Projet personnel local (ordinateur de l'utilisateur unique)
- **Principe** : Pas de pr√©cautions excessives, acc√®s direct via terminal autoris√©
- **Le√ßon** : `Get-Content .env` ‚ùå ‚Üí `Get-Content "F:\...\Langgraph Alteir\.env"` ‚úÖ
