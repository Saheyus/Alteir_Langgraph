#!/usr/bin/env python3
"""
Interface Streamlit pour le syst√®me multi-agents GDD Alteir
"""
import streamlit as st
import sys
from pathlib import Path
import json
from datetime import datetime

sys.path.append(str(Path(__file__).parent))

from workflows.content_workflow import ContentWorkflow
from agents.writer_agent import WriterConfig
from config.domain_configs.personnages_config import PERSONNAGES_CONFIG

# Configuration de la page
st.set_page_config(
    page_title="GDD Alteir - Multi-Agents",
    page_icon="ü§ñ",
    layout="wide"
)

# Style CSS
st.markdown("""
<style>
.main-header {
    font-size: 2.5rem;
    font-weight: bold;
    text-align: center;
    color: #1f77b4;
    margin-bottom: 2rem;
}
.metric-box {
    background-color: #f0f2f6;
    padding: 1rem;
    border-radius: 0.5rem;
    margin: 0.5rem 0;
}
.success-box {
    background-color: #d4edda;
    border-left: 4px solid #28a745;
    padding: 1rem;
    margin: 1rem 0;
}
.warning-box {
    background-color: #fff3cd;
    border-left: 4px solid #ffc107;
    padding: 1rem;
    margin: 1rem 0;
}
</style>
""", unsafe_allow_html=True)

def main():
    """Interface principale"""
    
    # En-t√™te
    st.markdown('<p class="main-header">ü§ñ Syst√®me Multi-Agents GDD Alteir</p>', unsafe_allow_html=True)
    
    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è Configuration")
        
        st.subheader("Mod√®le LLM")
        st.info("**GPT-5-nano** (OpenAI)")
        
        st.subheader("Domaine")
        domain = st.selectbox("Domaine", ["Personnages"], index=0)
        
        st.subheader("üé≤ Mode Param√®tres")
        param_mode = st.radio(
            "Mode",
            ["Random", "Manuel"],
            index=0,
            help="Random = param√®tres al√©atoires √† chaque g√©n√©ration"
        )
        
        st.subheader("üìä Statistiques")
        outputs_dir = Path("outputs")
        if outputs_dir.exists():
            nb_files = len(list(outputs_dir.glob("*.json")))
            st.metric("G√©n√©rations", nb_files)
    
    # Tabs
    tab1, tab2, tab3 = st.tabs(["‚ú® Cr√©er", "üìÇ R√©sultats", "‚ÑπÔ∏è √Ä propos"])
    
    # TAB 1: Cr√©ation
    with tab1:
        st.header("Cr√©er un Personnage")
        
        # Brief
        brief = st.text_area(
            "Description du personnage",
            placeholder="Ex: Un alchimiste qui transforme les √©motions en substances physiques. Genre: Non d√©fini. Esp√®ce: Humain modifi√©. √Çge: 38 cycles.",
            height=100
        )
        
        col1, col2 = st.columns(2)
        
        # G√©n√©rer valeurs al√©atoires si mode Random
        if param_mode == "Random":
            import random
            intent_options = ["orthogonal_depth", "vocation_pure", "archetype_assume", "mystere_non_resolu"]
            level_options = ["cameo", "standard", "major"]
            dialogue_options = ["parle", "gestuel", "telepathique", "ecrit_only"]
            
            intent_random = random.choice(intent_options)
            level_random = random.choice(level_options)
            dialogue_random = random.choice(dialogue_options)
            creativity_random = round(random.uniform(0.5, 0.9), 1)
        
        with col1:
            st.subheader("Param√®tres Narratifs")
            
            if param_mode == "Random":
                st.info(f"""
                üé≤ **Param√®tres al√©atoires:**
                - Intent: `{intent_random}`
                - Niveau: `{level_random}`
                - Dialogue: `{dialogue_random}`
                - Cr√©ativit√©: `{creativity_random}`
                
                (Passer en mode Manuel pour choisir)
                """)
                intent = intent_random
                level = level_random
                dialogue_mode = dialogue_random
                creativity = creativity_random
            else:
                intent = st.selectbox(
                    "Intention narrative",
                    [
                        "orthogonal_depth",
                        "vocation_pure",
                        "archetype_assume",
                        "mystere_non_resolu"
                    ],
                    help="Orthogonal = profondeur ‚â† r√¥le visible"
                )
                
                level = st.selectbox(
                    "Niveau de d√©tail",
                    ["cameo", "standard", "major"],
                    index=1,
                    help="cameo: 4-6 r√©pliques | standard: 8-10 | major: 10-12"
                )
                
                dialogue_mode = st.selectbox(
                    "Mode de dialogue",
                    ["parle", "gestuel", "telepathique", "ecrit_only"],
                    help="Comment le personnage communique"
                )
        
        with col2:
            st.subheader("Param√®tres Techniques")
            
            if param_mode == "Manuel":
                creativity = st.slider(
                    "Cr√©ativit√© (temp√©rature)",
                    min_value=0.0,
                    max_value=1.0,
                    value=0.7,
                    step=0.1,
                    help="0 = d√©terministe | 1 = tr√®s cr√©atif"
                )
            
            st.info(f"""
            **Configuration:**
            - Intent: `{intent}`
            - Niveau: `{level}`
            - Dialogue: `{dialogue_mode}`
            - Temp√©rature: `{creativity}`
            """)
        
        # Bouton de g√©n√©ration
        if st.button("üöÄ G√©n√©rer le Personnage", type="primary", use_container_width=True):
            if not brief:
                st.error("‚ö†Ô∏è Veuillez fournir une description du personnage")
            else:
                generate_character(brief, intent, level, dialogue_mode, creativity)
    
    # TAB 2: R√©sultats
    with tab2:
        st.header("R√©sultats G√©n√©r√©s")
        
        show_results()
    
    # TAB 3: √Ä propos
    with tab3:
        st.header("√Ä propos")
        
        st.markdown("""
        ### üéØ Syst√®me Multi-Agents GDD Alteir
        
        **Architecture:**
        - 4 agents g√©n√©riques (Writer, Reviewer, Corrector, Validator)
        - Configuration par domaine (Personnages, Lieux, etc.)
        - LangGraph pour orchestration
        - GPT-5-nano pour g√©n√©ration
        
        **Workflow:**
        1. **Writer** ‚Üí G√©n√®re le contenu initial
        2. **Reviewer** ‚Üí Analyse la coh√©rence narrative
        3. **Corrector** ‚Üí Corrige la forme
        4. **Validator** ‚Üí Validation finale
        
        **Principes Narratifs (Personnages):**
        - Orthogonalit√© r√¥le ‚Üî profondeur
        - Structure Surface / Profondeur / Monde
        - Temporalit√© IS / WAS / COULD-HAVE-BEEN
        - Show > Tell
        - Relations concr√®tes (prix, dette, d√©lai, tabou)
        
        **Outputs:**
        - JSON complet avec m√©tadonn√©es
        - Markdown format√© pour lecture
        - Scores de qualit√© (coh√©rence, compl√©tude, qualit√©)
        """)

def generate_character(brief, intent, level, dialogue_mode, creativity):
    """G√©n√®re un personnage"""
    
    with st.spinner("üé® G√©n√©ration en cours..."):
        
        # Configuration
        writer_config = WriterConfig(
            intent=intent,
            level=level,
            dialogue_mode=dialogue_mode,
            creativity=creativity
        )
        
        # Workflow
        workflow = ContentWorkflow(PERSONNAGES_CONFIG)
        
        # Progress bar
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        try:
            status_text.text("üñäÔ∏è Writer: G√©n√©ration du contenu...")
            progress_bar.progress(25)
            
            result = workflow.run(brief, writer_config)
            
            status_text.text("‚úÖ Termin√© !")
            progress_bar.progress(100)
            
            # Sauvegarder
            json_file, md_file = workflow.save_results(result)
            
            # Afficher r√©sultats
            st.success("‚úÖ Personnage g√©n√©r√© avec succ√®s !")
            
            # M√©triques
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric(
                    "Coh√©rence",
                    f"{result['coherence_score']:.2f}",
                    delta="Bon" if result['coherence_score'] >= 0.7 else "√Ä am√©liorer"
                )
            
            with col2:
                st.metric(
                    "Compl√©tude",
                    f"{result['completeness_score']:.2f}",
                    delta="Complet" if result['completeness_score'] >= 0.8 else "Incomplet"
                )
            
            with col3:
                st.metric(
                    "Qualit√©",
                    f"{result['quality_score']:.2f}",
                    delta="Bon" if result['quality_score'] >= 0.7 else "√Ä am√©liorer"
                )
            
            # Statut
            if result['ready_for_publication']:
                st.markdown('<div class="success-box">‚úÖ <b>Pr√™t pour publication</b></div>', unsafe_allow_html=True)
            else:
                st.markdown('<div class="warning-box">‚ö†Ô∏è <b>N√©cessite r√©vision</b></div>', unsafe_allow_html=True)
            
            # Contenu
            with st.expander("üìÑ Voir le contenu g√©n√©r√©", expanded=True):
                st.markdown(result['content'])
            
            # Probl√®mes
            if result['review_issues']:
                with st.expander(f"‚ö†Ô∏è Probl√®mes identifi√©s ({len(result['review_issues'])})"):
                    for issue in result['review_issues']:
                        severity_icon = "üî¥" if issue['severity'] == 'critical' else "üü°"
                        st.write(f"{severity_icon} **{issue['description']}**")
            
            # Corrections
            if result['corrections']:
                with st.expander(f"‚úèÔ∏è Corrections ({len(result['corrections'])})"):
                    for corr in result['corrections']:
                        st.write(f"**{corr['type']}**: {corr['original']} ‚Üí {corr['corrected']}")
            
            # Fichiers
            st.info(f"""
            **Fichiers sauvegard√©s:**
            - üìä JSON: `{json_file}`
            - üìù Markdown: `{md_file}`
            """)
            
        except Exception as e:
            st.error(f"‚ùå Erreur lors de la g√©n√©ration: {e}")

def show_results():
    """Affiche les r√©sultats g√©n√©r√©s"""
    
    outputs_dir = Path("outputs")
    
    if not outputs_dir.exists() or not list(outputs_dir.glob("*.json")):
        st.info("Aucun r√©sultat g√©n√©r√© pour le moment.")
        return
    
    # Lister les fichiers
    json_files = sorted(
        outputs_dir.glob("*.json"),
        key=lambda p: p.stat().st_mtime,
        reverse=True
    )
    
    st.write(f"**{len(json_files)} r√©sultat(s) g√©n√©r√©(s)**")
    
    # S√©lecteur
    file_names = [f.stem for f in json_files]
    selected_file = st.selectbox("S√©lectionner un r√©sultat", file_names)
    
    if selected_file:
        json_path = outputs_dir / f"{selected_file}.json"
        md_path = outputs_dir / f"{selected_file}.md"
        
        # Charger le JSON
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # Afficher
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Coh√©rence", f"{data['coherence_score']:.2f}")
        with col2:
            st.metric("Compl√©tude", f"{data['completeness_score']:.2f}")
        with col3:
            st.metric("Qualit√©", f"{data['quality_score']:.2f}")
        
        # Statut
        if data['ready_for_publication']:
            st.success("‚úÖ Pr√™t pour publication")
        else:
            st.warning("‚ö†Ô∏è N√©cessite r√©vision")
        
        # Contenu
        with st.expander("üìÑ Contenu", expanded=True):
            st.markdown(data['content'])
        
        # M√©tadonn√©es
        with st.expander("üìä M√©tadonn√©es"):
            st.json(data['writer_metadata'])

if __name__ == "__main__":
    main()

